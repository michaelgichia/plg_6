// This file is auto-generated by @hey-api/openapi-ts

export const Body_documents_process_multiple_documentsSchema = {
    properties: {
        files: {
            items: {
                type: 'string',
                format: 'binary'
            },
            type: 'array',
            title: 'Files'
        },
        course_id: {
            type: 'string',
            format: 'uuid',
            title: 'Course Id'
        }
    },
    type: 'object',
    required: ['files', 'course_id'],
    title: 'Body_documents-process_multiple_documents'
} as const;

export const Body_login_login_access_tokenSchema = {
    properties: {
        grant_type: {
            anyOf: [
                {
                    type: 'string',
                    pattern: '^password$'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Grant Type'
        },
        username: {
            type: 'string',
            title: 'Username'
        },
        password: {
            type: 'string',
            format: 'password',
            title: 'Password'
        },
        scope: {
            type: 'string',
            title: 'Scope',
            default: ''
        },
        client_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Id'
        },
        client_secret: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            format: 'password',
            title: 'Client Secret'
        }
    },
    type: 'object',
    required: ['username', 'password'],
    title: 'Body_login-login_access_token'
} as const;

export const ChatMessageSchema = {
    properties: {
        message: {
            type: 'string',
            title: 'Message'
        },
        continue_response: {
            type: 'boolean',
            title: 'Continue Response',
            default: false
        }
    },
    type: 'object',
    required: ['message'],
    title: 'ChatMessage',
    example: {
        continue_response: false,
        message: 'What is the main topic of the course?'
    }
} as const;

export const ChatPublicSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        message: {
            type: 'string',
            title: 'Message'
        },
        course_id: {
            type: 'string',
            format: 'uuid',
            title: 'Course Id'
        },
        is_system: {
            type: 'boolean',
            title: 'Is System'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['id', 'message', 'course_id', 'is_system', 'created_at', 'updated_at'],
    title: 'ChatPublic'
} as const;

export const CourseSchema = {
    properties: {
        name: {
            type: 'string',
            maxLength: 255,
            minLength: 3,
            title: 'Name'
        },
        description: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 1020
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        owner_id: {
            type: 'string',
            format: 'uuid',
            title: 'Owner Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['name', 'owner_id'],
    title: 'Course'
} as const;

export const CourseCreateSchema = {
    properties: {
        name: {
            type: 'string',
            maxLength: 255,
            minLength: 3,
            title: 'Name'
        },
        description: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 1020
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        }
    },
    type: 'object',
    required: ['name'],
    title: 'CourseCreate'
} as const;

export const CoursePublicSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        owner_id: {
            type: 'string',
            format: 'uuid',
            title: 'Owner Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        documents: {
            items: {
                '$ref': '#/components/schemas/DocumentPublic'
            },
            type: 'array',
            title: 'Documents'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['id', 'owner_id', 'name', 'documents', 'created_at', 'updated_at'],
    title: 'CoursePublic'
} as const;

export const CourseUpdateSchema = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255,
                    minLength: 3
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        description: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 1020
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        }
    },
    type: 'object',
    title: 'CourseUpdate'
} as const;

export const CourseWithDocumentsSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        owner_id: {
            type: 'string',
            format: 'uuid',
            title: 'Owner Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        documents: {
            items: {
                '$ref': '#/components/schemas/DocumentPublic'
            },
            type: 'array',
            title: 'Documents',
            default: []
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['id', 'owner_id', 'name', 'created_at', 'updated_at'],
    title: 'CourseWithDocuments'
} as const;

export const CoursesPublicSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/CoursePublic'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'CoursesPublic'
} as const;

export const DifficultyLevelSchema = {
    type: 'string',
    enum: ['easy', 'medium', 'hard', 'expert', 'all'],
    title: 'DifficultyLevel'
} as const;

export const DocumentSchema = {
    properties: {
        title: {
            type: 'string',
            maxLength: 255,
            minLength: 1,
            title: 'Title'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        chunk_count: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Chunk Count'
        },
        course_id: {
            type: 'string',
            format: 'uuid',
            title: 'Course Id'
        },
        embedding_namespace: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Embedding Namespace'
        },
        filename: {
            type: 'string',
            title: 'Filename'
        },
        status: {
            '$ref': '#/components/schemas/DocumentStatus',
            default: 'pending'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['title', 'course_id', 'filename'],
    title: 'Document'
} as const;

export const DocumentPublicSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        course_id: {
            type: 'string',
            format: 'uuid',
            title: 'Course Id'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        status: {
            '$ref': '#/components/schemas/DocumentStatus'
        }
    },
    type: 'object',
    required: ['id', 'course_id', 'updated_at', 'created_at', 'status'],
    title: 'DocumentPublic'
} as const;

export const DocumentStatusSchema = {
    type: 'string',
    enum: ['pending', 'processing', 'completed', 'failed'],
    title: 'DocumentStatus'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const ItemSchema = {
    properties: {
        title: {
            type: 'string',
            maxLength: 255,
            minLength: 1,
            title: 'Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        owner_id: {
            type: 'string',
            format: 'uuid',
            title: 'Owner Id'
        }
    },
    type: 'object',
    required: ['title', 'owner_id'],
    title: 'Item'
} as const;

export const ItemCreateSchema = {
    properties: {
        title: {
            type: 'string',
            maxLength: 255,
            minLength: 1,
            title: 'Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        }
    },
    type: 'object',
    required: ['title'],
    title: 'ItemCreate'
} as const;

export const ItemPublicSchema = {
    properties: {
        title: {
            type: 'string',
            maxLength: 255,
            minLength: 1,
            title: 'Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        owner_id: {
            type: 'string',
            format: 'uuid',
            title: 'Owner Id'
        }
    },
    type: 'object',
    required: ['title', 'id', 'owner_id'],
    title: 'ItemPublic'
} as const;

export const ItemUpdateSchema = {
    properties: {
        title: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255,
                    minLength: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        }
    },
    type: 'object',
    title: 'ItemUpdate'
} as const;

export const ItemsPublicSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/Item'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'ItemsPublic'
} as const;

export const MessageSchema = {
    properties: {
        message: {
            type: 'string',
            title: 'Message'
        }
    },
    type: 'object',
    required: ['message'],
    title: 'Message'
} as const;

export const NewPasswordSchema = {
    properties: {
        token: {
            type: 'string',
            title: 'Token'
        },
        new_password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'New Password'
        }
    },
    type: 'object',
    required: ['token', 'new_password'],
    title: 'NewPassword'
} as const;

export const PrivateUserCreateSchema = {
    properties: {
        email: {
            type: 'string',
            title: 'Email'
        },
        password: {
            type: 'string',
            title: 'Password'
        },
        full_name: {
            type: 'string',
            title: 'Full Name'
        },
        is_verified: {
            type: 'boolean',
            title: 'Is Verified',
            default: false
        }
    },
    type: 'object',
    required: ['email', 'password', 'full_name'],
    title: 'PrivateUserCreate'
} as const;

export const QAItemSchema = {
    properties: {
        question: {
            type: 'string',
            title: 'Question'
        },
        answer: {
            type: 'string',
            title: 'Answer'
        }
    },
    type: 'object',
    required: ['question', 'answer'],
    title: 'QAItem'
} as const;

export const QuizAttemptPublicSchema = {
    properties: {
        quiz_id: {
            type: 'string',
            format: 'uuid',
            title: 'Quiz Id'
        },
        selected_answer_text: {
            type: 'string',
            title: 'Selected Answer Text'
        },
        is_correct: {
            type: 'boolean',
            title: 'Is Correct'
        },
        correct_answer_text: {
            type: 'string',
            title: 'Correct Answer Text'
        },
        time_spent_seconds: {
            type: 'number',
            title: 'Time Spent Seconds'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        }
    },
    type: 'object',
    required: ['quiz_id', 'selected_answer_text', 'is_correct', 'correct_answer_text', 'time_spent_seconds', 'created_at'],
    title: 'QuizAttemptPublic',
    description: `Public schema for a single QuizAttempt record.
Used to return the full history/results when a session is complete.`
} as const;

export const QuizChoiceSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        text: {
            type: 'string',
            title: 'Text'
        }
    },
    type: 'object',
    required: ['id', 'text'],
    title: 'QuizChoice'
} as const;

export const QuizPublicSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        quiz_text: {
            type: 'string',
            title: 'Quiz Text'
        },
        choices: {
            items: {
                '$ref': '#/components/schemas/QuizChoice'
            },
            type: 'array',
            title: 'Choices'
        }
    },
    type: 'object',
    required: ['id', 'quiz_text', 'choices'],
    title: 'QuizPublic'
} as const;

export const QuizScoreSummarySchema = {
    properties: {
        total_submitted: {
            type: 'integer',
            title: 'Total Submitted'
        },
        total_correct: {
            type: 'integer',
            title: 'Total Correct'
        },
        score_percentage: {
            type: 'number',
            title: 'Score Percentage'
        },
        results: {
            items: {
                '$ref': '#/components/schemas/SingleQuizScore'
            },
            type: 'array',
            title: 'Results'
        }
    },
    type: 'object',
    required: ['total_submitted', 'total_correct', 'score_percentage', 'results'],
    title: 'QuizScoreSummary',
    description: 'The overall score for the batch of submissions.'
} as const;

export const QuizSessionPublicSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        course_id: {
            type: 'string',
            format: 'uuid',
            title: 'Course Id'
        },
        total_submitted: {
            type: 'integer',
            title: 'Total Submitted'
        },
        total_correct: {
            type: 'integer',
            title: 'Total Correct'
        },
        score_percentage: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Score Percentage'
        },
        is_completed: {
            type: 'boolean',
            title: 'Is Completed'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['id', 'course_id', 'total_submitted', 'total_correct', 'is_completed', 'created_at', 'updated_at'],
    title: 'QuizSessionPublic',
    description: 'Public schema for a QuizSession.'
} as const;

export const QuizSessionPublicWithResultsSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        course_id: {
            type: 'string',
            format: 'uuid',
            title: 'Course Id'
        },
        total_submitted: {
            type: 'integer',
            title: 'Total Submitted'
        },
        total_correct: {
            type: 'integer',
            title: 'Total Correct'
        },
        score_percentage: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Score Percentage'
        },
        is_completed: {
            type: 'boolean',
            title: 'Is Completed'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        },
        quizzes: {
            items: {
                '$ref': '#/components/schemas/QuizPublic'
            },
            type: 'array',
            title: 'Quizzes'
        },
        results: {
            items: {
                '$ref': '#/components/schemas/QuizAttemptPublic'
            },
            type: 'array',
            title: 'Results'
        }
    },
    type: 'object',
    required: ['id', 'course_id', 'total_submitted', 'total_correct', 'is_completed', 'created_at', 'updated_at'],
    title: 'QuizSessionPublicWithResults',
    description: `Expanded schema that includes quiz attempts (results)
when the session is marked as completed.`
} as const;

export const QuizSessionsListSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/QuizSessionPublic'
            },
            type: 'array',
            title: 'Data'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'QuizSessionsList'
} as const;

export const QuizStatsSchema = {
    properties: {
        best_total_submitted: {
            type: 'integer',
            title: 'Best Total Submitted'
        },
        best_total_correct: {
            type: 'integer',
            title: 'Best Total Correct'
        },
        best_score_percentage: {
            type: 'number',
            title: 'Best Score Percentage'
        },
        average_score: {
            type: 'number',
            title: 'Average Score'
        },
        attempts: {
            type: 'integer',
            title: 'Attempts'
        }
    },
    type: 'object',
    required: ['best_total_submitted', 'best_total_correct', 'best_score_percentage', 'average_score', 'attempts'],
    title: 'QuizStats'
} as const;

export const QuizSubmissionBatchSchema = {
    properties: {
        submissions: {
            items: {
                '$ref': '#/components/schemas/SingleQuizSubmission'
            },
            type: 'array',
            title: 'Submissions'
        },
        total_time_seconds: {
            type: 'number',
            title: 'Total Time Seconds',
            default: 0
        }
    },
    type: 'object',
    required: ['submissions'],
    title: 'QuizSubmissionBatch',
    description: 'Container for multiple quiz submissions.'
} as const;

export const QuizzesPublicSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/QuizPublic'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'QuizzesPublic'
} as const;

export const SingleQuizScoreSchema = {
    properties: {
        quiz_id: {
            type: 'string',
            format: 'uuid',
            title: 'Quiz Id'
        },
        is_correct: {
            type: 'boolean',
            title: 'Is Correct'
        },
        correct_answer_text: {
            type: 'string',
            title: 'Correct Answer Text'
        },
        feedback: {
            type: 'string',
            title: 'Feedback'
        }
    },
    type: 'object',
    required: ['quiz_id', 'is_correct', 'correct_answer_text', 'feedback'],
    title: 'SingleQuizScore',
    description: 'The result for a single question.'
} as const;

export const SingleQuizSubmissionSchema = {
    properties: {
        quiz_id: {
            type: 'string',
            format: 'uuid',
            title: 'Quiz Id'
        },
        selected_answer_text: {
            type: 'string',
            title: 'Selected Answer Text'
        }
    },
    type: 'object',
    required: ['quiz_id', 'selected_answer_text'],
    title: 'SingleQuizSubmission',
    description: "The user's answer for one question."
} as const;

export const TokenSchema = {
    properties: {
        access_token: {
            type: 'string',
            title: 'Access Token'
        },
        token_type: {
            type: 'string',
            title: 'Token Type',
            default: 'bearer'
        }
    },
    type: 'object',
    required: ['access_token'],
    title: 'Token'
} as const;

export const UpdatePasswordSchema = {
    properties: {
        current_password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'Current Password'
        },
        new_password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'New Password'
        }
    },
    type: 'object',
    required: ['current_password', 'new_password'],
    title: 'UpdatePassword'
} as const;

export const UserCreateSchema = {
    properties: {
        email: {
            type: 'string',
            maxLength: 255,
            format: 'email',
            title: 'Email'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            default: true
        },
        is_superuser: {
            type: 'boolean',
            title: 'Is Superuser',
            default: false
        },
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        },
        password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'Password'
        }
    },
    type: 'object',
    required: ['email', 'password'],
    title: 'UserCreate'
} as const;

export const UserPublicSchema = {
    properties: {
        email: {
            type: 'string',
            maxLength: 255,
            format: 'email',
            title: 'Email'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            default: true
        },
        is_superuser: {
            type: 'boolean',
            title: 'Is Superuser',
            default: false
        },
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['email', 'id'],
    title: 'UserPublic'
} as const;

export const UserRegisterSchema = {
    properties: {
        email: {
            type: 'string',
            maxLength: 255,
            format: 'email',
            title: 'Email'
        },
        password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'Password'
        },
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        }
    },
    type: 'object',
    required: ['email', 'password'],
    title: 'UserRegister'
} as const;

export const UserUpdateSchema = {
    properties: {
        email: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255,
                    format: 'email'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            default: true
        },
        is_superuser: {
            type: 'boolean',
            title: 'Is Superuser',
            default: false
        },
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        },
        password: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 40,
                    minLength: 8
                },
                {
                    type: 'null'
                }
            ],
            title: 'Password'
        }
    },
    type: 'object',
    title: 'UserUpdate'
} as const;

export const UserUpdateMeSchema = {
    properties: {
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        },
        email: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255,
                    format: 'email'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        }
    },
    type: 'object',
    title: 'UserUpdateMe'
} as const;

export const UsersPublicSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/UserPublic'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'UsersPublic'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;
