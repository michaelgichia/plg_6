// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseURL: `${string}://${string}` | (string & {});
};

/**
 * Body_documents-process_multiple_documents
 */
export type BodyDocumentsProcessMultipleDocuments = {
    /**
     * Files
     */
    files: Array<Blob | File>;
    /**
     * Course Id
     */
    course_id: string;
};

/**
 * Body_login-login_access_token
 */
export type BodyLoginLoginAccessToken = {
    /**
     * Grant Type
     */
    grant_type?: string | null;
    /**
     * Username
     */
    username: string;
    /**
     * Password
     */
    password: string;
    /**
     * Scope
     */
    scope?: string;
    /**
     * Client Id
     */
    client_id?: string | null;
    /**
     * Client Secret
     */
    client_secret?: string | null;
};

/**
 * ChatMessage
 */
export type ChatMessage = {
    /**
     * Message
     */
    message: string;
    /**
     * Continue Response
     */
    continue_response?: boolean;
};

/**
 * ChatPublic
 */
export type ChatPublic = {
    /**
     * Id
     */
    id: string;
    /**
     * Message
     */
    message: string;
    /**
     * Course Id
     */
    course_id: string;
    /**
     * Is System
     */
    is_system: boolean;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
};

/**
 * Course
 */
export type Course = {
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Id
     */
    id?: string;
    /**
     * Owner Id
     */
    owner_id: string;
    /**
     * Created At
     */
    created_at?: string;
    /**
     * Updated At
     */
    updated_at?: string;
};

/**
 * CourseCreate
 */
export type CourseCreate = {
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
};

/**
 * CoursePublic
 */
export type CoursePublic = {
    /**
     * Id
     */
    id: string;
    /**
     * Owner Id
     */
    owner_id: string;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Documents
     */
    documents: Array<DocumentPublic>;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
};

/**
 * CourseUpdate
 */
export type CourseUpdate = {
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
};

/**
 * CourseWithDocuments
 */
export type CourseWithDocuments = {
    /**
     * Id
     */
    id: string;
    /**
     * Owner Id
     */
    owner_id: string;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Documents
     */
    documents?: Array<DocumentPublic>;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
};

/**
 * CoursesPublic
 */
export type CoursesPublic = {
    /**
     * Data
     */
    data: Array<CoursePublic>;
    /**
     * Count
     */
    count: number;
};

/**
 * DifficultyLevel
 */
export type DifficultyLevel = 'easy' | 'medium' | 'hard' | 'expert' | 'all';

/**
 * Document
 */
export type Document = {
    /**
     * Title
     */
    title: string;
    /**
     * Id
     */
    id?: string;
    /**
     * Chunk Count
     */
    chunk_count?: number | null;
    /**
     * Course Id
     */
    course_id: string;
    /**
     * Embedding Namespace
     */
    embedding_namespace?: string | null;
    /**
     * Filename
     */
    filename: string;
    status?: DocumentStatus;
    /**
     * Created At
     */
    created_at?: string;
    /**
     * Updated At
     */
    updated_at?: string;
};

/**
 * DocumentPublic
 */
export type DocumentPublic = {
    /**
     * Id
     */
    id: string;
    /**
     * Course Id
     */
    course_id: string;
    /**
     * Updated At
     */
    updated_at: string;
    /**
     * Created At
     */
    created_at: string;
    status: DocumentStatus;
};

/**
 * DocumentStatus
 */
export type DocumentStatus = 'pending' | 'processing' | 'completed' | 'failed';

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * Item
 */
export type Item = {
    /**
     * Title
     */
    title: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Id
     */
    id?: string;
    /**
     * Owner Id
     */
    owner_id: string;
};

/**
 * ItemCreate
 */
export type ItemCreate = {
    /**
     * Title
     */
    title: string;
    /**
     * Description
     */
    description?: string | null;
};

/**
 * ItemPublic
 */
export type ItemPublic = {
    /**
     * Title
     */
    title: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Id
     */
    id: string;
    /**
     * Owner Id
     */
    owner_id: string;
};

/**
 * ItemUpdate
 */
export type ItemUpdate = {
    /**
     * Title
     */
    title?: string | null;
    /**
     * Description
     */
    description?: string | null;
};

/**
 * ItemsPublic
 */
export type ItemsPublic = {
    /**
     * Data
     */
    data: Array<Item>;
    /**
     * Count
     */
    count: number;
};

/**
 * Message
 */
export type Message = {
    /**
     * Message
     */
    message: string;
};

/**
 * NewPassword
 */
export type NewPassword = {
    /**
     * Token
     */
    token: string;
    /**
     * New Password
     */
    new_password: string;
};

/**
 * PrivateUserCreate
 */
export type PrivateUserCreate = {
    /**
     * Email
     */
    email: string;
    /**
     * Password
     */
    password: string;
    /**
     * Full Name
     */
    full_name: string;
    /**
     * Is Verified
     */
    is_verified?: boolean;
};

/**
 * QAItem
 */
export type QaItem = {
    /**
     * Question
     */
    question: string;
    /**
     * Answer
     */
    answer: string;
};

/**
 * QuizAttemptPublic
 * Public schema for a single QuizAttempt record.
 * Used to return the full history/results when a session is complete.
 */
export type QuizAttemptPublic = {
    /**
     * Quiz Id
     */
    quiz_id: string;
    /**
     * Selected Answer Text
     */
    selected_answer_text: string;
    /**
     * Is Correct
     */
    is_correct: boolean;
    /**
     * Correct Answer Text
     */
    correct_answer_text: string;
    /**
     * Time Spent Seconds
     */
    time_spent_seconds: number;
    /**
     * Created At
     */
    created_at: string;
};

/**
 * QuizChoice
 */
export type QuizChoice = {
    /**
     * Id
     */
    id: string;
    /**
     * Text
     */
    text: string;
};

/**
 * QuizPublic
 */
export type QuizPublic = {
    /**
     * Id
     */
    id: string;
    /**
     * Quiz Text
     */
    quiz_text: string;
    /**
     * Choices
     */
    choices: Array<QuizChoice>;
};

/**
 * QuizScoreSummary
 * The overall score for the batch of submissions.
 */
export type QuizScoreSummary = {
    /**
     * Total Submitted
     */
    total_submitted: number;
    /**
     * Total Correct
     */
    total_correct: number;
    /**
     * Score Percentage
     */
    score_percentage: number;
    /**
     * Results
     */
    results: Array<SingleQuizScore>;
};

/**
 * QuizSessionPublic
 * Public schema for a QuizSession.
 */
export type QuizSessionPublic = {
    /**
     * Id
     */
    id: string;
    /**
     * Course Id
     */
    course_id: string;
    /**
     * Total Submitted
     */
    total_submitted: number;
    /**
     * Total Correct
     */
    total_correct: number;
    /**
     * Score Percentage
     */
    score_percentage?: number | null;
    /**
     * Is Completed
     */
    is_completed: boolean;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
};

/**
 * QuizSessionPublicWithResults
 * Expanded schema that includes quiz attempts (results)
 * when the session is marked as completed.
 */
export type QuizSessionPublicWithResults = {
    /**
     * Id
     */
    id: string;
    /**
     * Course Id
     */
    course_id: string;
    /**
     * Total Submitted
     */
    total_submitted: number;
    /**
     * Total Correct
     */
    total_correct: number;
    /**
     * Score Percentage
     */
    score_percentage?: number | null;
    /**
     * Is Completed
     */
    is_completed: boolean;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
    /**
     * Quizzes
     */
    quizzes?: Array<QuizPublic>;
    /**
     * Results
     */
    results?: Array<QuizAttemptPublic>;
};

/**
 * QuizSessionsList
 */
export type QuizSessionsList = {
    /**
     * Data
     */
    data: Array<QuizSessionPublic>;
};

/**
 * QuizStats
 */
export type QuizStats = {
    /**
     * Best Total Submitted
     */
    best_total_submitted: number;
    /**
     * Best Total Correct
     */
    best_total_correct: number;
    /**
     * Best Score Percentage
     */
    best_score_percentage: number;
    /**
     * Average Score
     */
    average_score: number;
    /**
     * Attempts
     */
    attempts: number;
};

/**
 * QuizSubmissionBatch
 * Container for multiple quiz submissions.
 */
export type QuizSubmissionBatch = {
    /**
     * Submissions
     */
    submissions: Array<SingleQuizSubmission>;
    /**
     * Total Time Seconds
     */
    total_time_seconds?: number;
};

/**
 * QuizzesPublic
 */
export type QuizzesPublic = {
    /**
     * Data
     */
    data: Array<QuizPublic>;
    /**
     * Count
     */
    count: number;
};

/**
 * SingleQuizScore
 * The result for a single question.
 */
export type SingleQuizScore = {
    /**
     * Quiz Id
     */
    quiz_id: string;
    /**
     * Is Correct
     */
    is_correct: boolean;
    /**
     * Correct Answer Text
     */
    correct_answer_text: string;
    /**
     * Feedback
     */
    feedback: string;
};

/**
 * SingleQuizSubmission
 * The user's answer for one question.
 */
export type SingleQuizSubmission = {
    /**
     * Quiz Id
     */
    quiz_id: string;
    /**
     * Selected Answer Text
     */
    selected_answer_text: string;
};

/**
 * Token
 */
export type Token = {
    /**
     * Access Token
     */
    access_token: string;
    /**
     * Token Type
     */
    token_type?: string;
};

/**
 * UpdatePassword
 */
export type UpdatePassword = {
    /**
     * Current Password
     */
    current_password: string;
    /**
     * New Password
     */
    new_password: string;
};

/**
 * UserCreate
 */
export type UserCreate = {
    /**
     * Email
     */
    email: string;
    /**
     * Is Active
     */
    is_active?: boolean;
    /**
     * Is Superuser
     */
    is_superuser?: boolean;
    /**
     * Full Name
     */
    full_name?: string | null;
    /**
     * Password
     */
    password: string;
};

/**
 * UserPublic
 */
export type UserPublic = {
    /**
     * Email
     */
    email: string;
    /**
     * Is Active
     */
    is_active?: boolean;
    /**
     * Is Superuser
     */
    is_superuser?: boolean;
    /**
     * Full Name
     */
    full_name?: string | null;
    /**
     * Id
     */
    id: string;
};

/**
 * UserRegister
 */
export type UserRegister = {
    /**
     * Email
     */
    email: string;
    /**
     * Password
     */
    password: string;
    /**
     * Full Name
     */
    full_name?: string | null;
};

/**
 * UserUpdate
 */
export type UserUpdate = {
    /**
     * Email
     */
    email?: string | null;
    /**
     * Is Active
     */
    is_active?: boolean;
    /**
     * Is Superuser
     */
    is_superuser?: boolean;
    /**
     * Full Name
     */
    full_name?: string | null;
    /**
     * Password
     */
    password?: string | null;
};

/**
 * UserUpdateMe
 */
export type UserUpdateMe = {
    /**
     * Full Name
     */
    full_name?: string | null;
    /**
     * Email
     */
    email?: string | null;
};

/**
 * UsersPublic
 */
export type UsersPublic = {
    /**
     * Data
     */
    data: Array<UserPublic>;
    /**
     * Count
     */
    count: number;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

export type PostApiV1LoginAccessTokenData = {
    body: BodyLoginLoginAccessToken;
    path?: never;
    query?: never;
    url: '/api/v1/login/access-token';
};

export type PostApiV1LoginAccessTokenErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostApiV1LoginAccessTokenError = PostApiV1LoginAccessTokenErrors[keyof PostApiV1LoginAccessTokenErrors];

export type PostApiV1LoginAccessTokenResponses = {
    /**
     * Successful Response
     */
    200: Token;
};

export type PostApiV1LoginAccessTokenResponse = PostApiV1LoginAccessTokenResponses[keyof PostApiV1LoginAccessTokenResponses];

export type PostApiV1LoginTestTokenData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/login/test-token';
};

export type PostApiV1LoginTestTokenResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type PostApiV1LoginTestTokenResponse = PostApiV1LoginTestTokenResponses[keyof PostApiV1LoginTestTokenResponses];

export type PostApiV1PasswordRecoveryByEmailData = {
    body?: never;
    path: {
        /**
         * Email
         */
        email: string;
    };
    query?: never;
    url: '/api/v1/password-recovery/{email}';
};

export type PostApiV1PasswordRecoveryByEmailErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostApiV1PasswordRecoveryByEmailError = PostApiV1PasswordRecoveryByEmailErrors[keyof PostApiV1PasswordRecoveryByEmailErrors];

export type PostApiV1PasswordRecoveryByEmailResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type PostApiV1PasswordRecoveryByEmailResponse = PostApiV1PasswordRecoveryByEmailResponses[keyof PostApiV1PasswordRecoveryByEmailResponses];

export type PostApiV1ResetPasswordData = {
    body: NewPassword;
    path?: never;
    query?: never;
    url: '/api/v1/reset-password/';
};

export type PostApiV1ResetPasswordErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostApiV1ResetPasswordError = PostApiV1ResetPasswordErrors[keyof PostApiV1ResetPasswordErrors];

export type PostApiV1ResetPasswordResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type PostApiV1ResetPasswordResponse = PostApiV1ResetPasswordResponses[keyof PostApiV1ResetPasswordResponses];

export type PostApiV1PasswordRecoveryHtmlContentByEmailData = {
    body?: never;
    path: {
        /**
         * Email
         */
        email: string;
    };
    query?: never;
    url: '/api/v1/password-recovery-html-content/{email}';
};

export type PostApiV1PasswordRecoveryHtmlContentByEmailErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostApiV1PasswordRecoveryHtmlContentByEmailError = PostApiV1PasswordRecoveryHtmlContentByEmailErrors[keyof PostApiV1PasswordRecoveryHtmlContentByEmailErrors];

export type PostApiV1PasswordRecoveryHtmlContentByEmailResponses = {
    /**
     * Successful Response
     */
    200: string;
};

export type PostApiV1PasswordRecoveryHtmlContentByEmailResponse = PostApiV1PasswordRecoveryHtmlContentByEmailResponses[keyof PostApiV1PasswordRecoveryHtmlContentByEmailResponses];

export type GetApiV1UsersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
    };
    url: '/api/v1/users/';
};

export type GetApiV1UsersErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetApiV1UsersError = GetApiV1UsersErrors[keyof GetApiV1UsersErrors];

export type GetApiV1UsersResponses = {
    /**
     * Successful Response
     */
    200: UsersPublic;
};

export type GetApiV1UsersResponse = GetApiV1UsersResponses[keyof GetApiV1UsersResponses];

export type PostApiV1UsersData = {
    body: UserCreate;
    path?: never;
    query?: never;
    url: '/api/v1/users/';
};

export type PostApiV1UsersErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostApiV1UsersError = PostApiV1UsersErrors[keyof PostApiV1UsersErrors];

export type PostApiV1UsersResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type PostApiV1UsersResponse = PostApiV1UsersResponses[keyof PostApiV1UsersResponses];

export type DeleteApiV1UsersMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/users/me';
};

export type DeleteApiV1UsersMeResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type DeleteApiV1UsersMeResponse = DeleteApiV1UsersMeResponses[keyof DeleteApiV1UsersMeResponses];

export type GetApiV1UsersMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/users/me';
};

export type GetApiV1UsersMeResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type GetApiV1UsersMeResponse = GetApiV1UsersMeResponses[keyof GetApiV1UsersMeResponses];

export type PatchApiV1UsersMeData = {
    body: UserUpdateMe;
    path?: never;
    query?: never;
    url: '/api/v1/users/me';
};

export type PatchApiV1UsersMeErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PatchApiV1UsersMeError = PatchApiV1UsersMeErrors[keyof PatchApiV1UsersMeErrors];

export type PatchApiV1UsersMeResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type PatchApiV1UsersMeResponse = PatchApiV1UsersMeResponses[keyof PatchApiV1UsersMeResponses];

export type PatchApiV1UsersMePasswordData = {
    body: UpdatePassword;
    path?: never;
    query?: never;
    url: '/api/v1/users/me/password';
};

export type PatchApiV1UsersMePasswordErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PatchApiV1UsersMePasswordError = PatchApiV1UsersMePasswordErrors[keyof PatchApiV1UsersMePasswordErrors];

export type PatchApiV1UsersMePasswordResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type PatchApiV1UsersMePasswordResponse = PatchApiV1UsersMePasswordResponses[keyof PatchApiV1UsersMePasswordResponses];

export type PostApiV1UsersSignupData = {
    body: UserRegister;
    path?: never;
    query?: never;
    url: '/api/v1/users/signup';
};

export type PostApiV1UsersSignupErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostApiV1UsersSignupError = PostApiV1UsersSignupErrors[keyof PostApiV1UsersSignupErrors];

export type PostApiV1UsersSignupResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type PostApiV1UsersSignupResponse = PostApiV1UsersSignupResponses[keyof PostApiV1UsersSignupResponses];

export type DeleteApiV1UsersByUserIdData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: string;
    };
    query?: never;
    url: '/api/v1/users/{user_id}';
};

export type DeleteApiV1UsersByUserIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteApiV1UsersByUserIdError = DeleteApiV1UsersByUserIdErrors[keyof DeleteApiV1UsersByUserIdErrors];

export type DeleteApiV1UsersByUserIdResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type DeleteApiV1UsersByUserIdResponse = DeleteApiV1UsersByUserIdResponses[keyof DeleteApiV1UsersByUserIdResponses];

export type GetApiV1UsersByUserIdData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: string;
    };
    query?: never;
    url: '/api/v1/users/{user_id}';
};

export type GetApiV1UsersByUserIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetApiV1UsersByUserIdError = GetApiV1UsersByUserIdErrors[keyof GetApiV1UsersByUserIdErrors];

export type GetApiV1UsersByUserIdResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type GetApiV1UsersByUserIdResponse = GetApiV1UsersByUserIdResponses[keyof GetApiV1UsersByUserIdResponses];

export type PatchApiV1UsersByUserIdData = {
    body: UserUpdate;
    path: {
        /**
         * User Id
         */
        user_id: string;
    };
    query?: never;
    url: '/api/v1/users/{user_id}';
};

export type PatchApiV1UsersByUserIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PatchApiV1UsersByUserIdError = PatchApiV1UsersByUserIdErrors[keyof PatchApiV1UsersByUserIdErrors];

export type PatchApiV1UsersByUserIdResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type PatchApiV1UsersByUserIdResponse = PatchApiV1UsersByUserIdResponses[keyof PatchApiV1UsersByUserIdResponses];

export type PostApiV1UtilsTestEmailData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Email To
         */
        email_to: string;
    };
    url: '/api/v1/utils/test-email/';
};

export type PostApiV1UtilsTestEmailErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostApiV1UtilsTestEmailError = PostApiV1UtilsTestEmailErrors[keyof PostApiV1UtilsTestEmailErrors];

export type PostApiV1UtilsTestEmailResponses = {
    /**
     * Successful Response
     */
    201: Message;
};

export type PostApiV1UtilsTestEmailResponse = PostApiV1UtilsTestEmailResponses[keyof PostApiV1UtilsTestEmailResponses];

export type GetApiV1UtilsHealthCheckData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/utils/health-check/';
};

export type GetApiV1UtilsHealthCheckResponses = {
    /**
     * Response Utils-Health Check
     * Successful Response
     */
    200: boolean;
};

export type GetApiV1UtilsHealthCheckResponse = GetApiV1UtilsHealthCheckResponses[keyof GetApiV1UtilsHealthCheckResponses];

export type GetApiV1ItemsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
    };
    url: '/api/v1/items/';
};

export type GetApiV1ItemsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetApiV1ItemsError = GetApiV1ItemsErrors[keyof GetApiV1ItemsErrors];

export type GetApiV1ItemsResponses = {
    /**
     * Successful Response
     */
    200: ItemsPublic;
};

export type GetApiV1ItemsResponse = GetApiV1ItemsResponses[keyof GetApiV1ItemsResponses];

export type PostApiV1ItemsData = {
    body: ItemCreate;
    path?: never;
    query?: never;
    url: '/api/v1/items/';
};

export type PostApiV1ItemsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostApiV1ItemsError = PostApiV1ItemsErrors[keyof PostApiV1ItemsErrors];

export type PostApiV1ItemsResponses = {
    /**
     * Successful Response
     */
    200: ItemPublic;
};

export type PostApiV1ItemsResponse = PostApiV1ItemsResponses[keyof PostApiV1ItemsResponses];

export type DeleteApiV1ItemsByIdData = {
    body?: never;
    path: {
        /**
         * Id
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/items/{id}';
};

export type DeleteApiV1ItemsByIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteApiV1ItemsByIdError = DeleteApiV1ItemsByIdErrors[keyof DeleteApiV1ItemsByIdErrors];

export type DeleteApiV1ItemsByIdResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type DeleteApiV1ItemsByIdResponse = DeleteApiV1ItemsByIdResponses[keyof DeleteApiV1ItemsByIdResponses];

export type GetApiV1ItemsByIdData = {
    body?: never;
    path: {
        /**
         * Id
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/items/{id}';
};

export type GetApiV1ItemsByIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetApiV1ItemsByIdError = GetApiV1ItemsByIdErrors[keyof GetApiV1ItemsByIdErrors];

export type GetApiV1ItemsByIdResponses = {
    /**
     * Successful Response
     */
    200: ItemPublic;
};

export type GetApiV1ItemsByIdResponse = GetApiV1ItemsByIdResponses[keyof GetApiV1ItemsByIdResponses];

export type PutApiV1ItemsByIdData = {
    body: ItemUpdate;
    path: {
        /**
         * Id
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/items/{id}';
};

export type PutApiV1ItemsByIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PutApiV1ItemsByIdError = PutApiV1ItemsByIdErrors[keyof PutApiV1ItemsByIdErrors];

export type PutApiV1ItemsByIdResponses = {
    /**
     * Successful Response
     */
    200: ItemPublic;
};

export type PutApiV1ItemsByIdResponse = PutApiV1ItemsByIdResponses[keyof PutApiV1ItemsByIdResponses];

export type GetApiV1CoursesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
    };
    url: '/api/v1/courses/';
};

export type GetApiV1CoursesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetApiV1CoursesError = GetApiV1CoursesErrors[keyof GetApiV1CoursesErrors];

export type GetApiV1CoursesResponses = {
    /**
     * Successful Response
     */
    200: CoursesPublic;
};

export type GetApiV1CoursesResponse = GetApiV1CoursesResponses[keyof GetApiV1CoursesResponses];

export type PostApiV1CoursesData = {
    body: CourseCreate;
    path?: never;
    query?: never;
    url: '/api/v1/courses/';
};

export type PostApiV1CoursesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostApiV1CoursesError = PostApiV1CoursesErrors[keyof PostApiV1CoursesErrors];

export type PostApiV1CoursesResponses = {
    /**
     * Successful Response
     */
    200: Course;
};

export type PostApiV1CoursesResponse = PostApiV1CoursesResponses[keyof PostApiV1CoursesResponses];

export type DeleteApiV1CoursesByIdData = {
    body?: never;
    path: {
        /**
         * Id
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/courses/{id}';
};

export type DeleteApiV1CoursesByIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteApiV1CoursesByIdError = DeleteApiV1CoursesByIdErrors[keyof DeleteApiV1CoursesByIdErrors];

export type DeleteApiV1CoursesByIdResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type DeleteApiV1CoursesByIdResponse = DeleteApiV1CoursesByIdResponses[keyof DeleteApiV1CoursesByIdResponses];

export type GetApiV1CoursesByIdData = {
    body?: never;
    path: {
        /**
         * Id
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/courses/{id}';
};

export type GetApiV1CoursesByIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetApiV1CoursesByIdError = GetApiV1CoursesByIdErrors[keyof GetApiV1CoursesByIdErrors];

export type GetApiV1CoursesByIdResponses = {
    /**
     * Successful Response
     */
    200: CourseWithDocuments;
};

export type GetApiV1CoursesByIdResponse = GetApiV1CoursesByIdResponses[keyof GetApiV1CoursesByIdResponses];

export type PutApiV1CoursesByIdData = {
    body: CourseUpdate;
    path: {
        /**
         * Id
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/courses/{id}';
};

export type PutApiV1CoursesByIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PutApiV1CoursesByIdError = PutApiV1CoursesByIdErrors[keyof PutApiV1CoursesByIdErrors];

export type PutApiV1CoursesByIdResponses = {
    /**
     * Successful Response
     */
    200: CoursePublic;
};

export type PutApiV1CoursesByIdResponse = PutApiV1CoursesByIdResponses[keyof PutApiV1CoursesByIdResponses];

export type GetApiV1CoursesByIdDocumentsData = {
    body?: never;
    path: {
        /**
         * Id
         */
        id: string;
    };
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
    };
    url: '/api/v1/courses/{id}/documents';
};

export type GetApiV1CoursesByIdDocumentsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetApiV1CoursesByIdDocumentsError = GetApiV1CoursesByIdDocumentsErrors[keyof GetApiV1CoursesByIdDocumentsErrors];

export type GetApiV1CoursesByIdDocumentsResponses = {
    /**
     * Response Courses-List Documents
     * Successful Response
     */
    200: Array<{
        [key: string]: unknown;
    }>;
};

export type GetApiV1CoursesByIdDocumentsResponse = GetApiV1CoursesByIdDocumentsResponses[keyof GetApiV1CoursesByIdDocumentsResponses];

export type GetApiV1CoursesByIdQuizzesData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Course Id
         */
        course_id: string;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Offset
         */
        offset?: number;
        /**
         * Order By
         */
        order_by?: 'created_at' | 'difficulty_level' | 'quiz_text';
        difficulty?: DifficultyLevel;
        /**
         * Order Direction
         */
        order_direction?: 'asc' | 'desc';
    };
    url: '/api/v1/courses/{id}/quizzes';
};

export type GetApiV1CoursesByIdQuizzesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetApiV1CoursesByIdQuizzesError = GetApiV1CoursesByIdQuizzesErrors[keyof GetApiV1CoursesByIdQuizzesErrors];

export type GetApiV1CoursesByIdQuizzesResponses = {
    /**
     * Successful Response
     */
    200: QuizzesPublic;
};

export type GetApiV1CoursesByIdQuizzesResponse = GetApiV1CoursesByIdQuizzesResponses[keyof GetApiV1CoursesByIdQuizzesResponses];

export type GetApiV1CoursesByIdAttemptsData = {
    body?: never;
    path: {
        /**
         * Id
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/courses/{id}/attempts';
};

export type GetApiV1CoursesByIdAttemptsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetApiV1CoursesByIdAttemptsError = GetApiV1CoursesByIdAttemptsErrors[keyof GetApiV1CoursesByIdAttemptsErrors];

export type GetApiV1CoursesByIdAttemptsResponses = {
    /**
     * Successful Response
     */
    200: QuizSessionsList;
};

export type GetApiV1CoursesByIdAttemptsResponse = GetApiV1CoursesByIdAttemptsResponses[keyof GetApiV1CoursesByIdAttemptsResponses];

export type PostApiV1CoursesByCourseIdQuizStartData = {
    body?: never;
    path: {
        /**
         * Course Id
         */
        course_id: string;
    };
    query?: {
        /**
         * Limit
         */
        limit?: number;
        /**
         * Offset
         */
        offset?: number;
        /**
         * Order By
         */
        order_by?: 'created_at' | 'difficulty_level' | 'quiz_text';
        difficulty?: DifficultyLevel;
        /**
         * Order Direction
         */
        order_direction?: 'asc' | 'desc';
    };
    url: '/api/v1/courses/{course_id}/quiz/start';
};

export type PostApiV1CoursesByCourseIdQuizStartErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostApiV1CoursesByCourseIdQuizStartError = PostApiV1CoursesByCourseIdQuizStartErrors[keyof PostApiV1CoursesByCourseIdQuizStartErrors];

export type PostApiV1CoursesByCourseIdQuizStartResponses = {
    /**
     * Response Courses-Start New Quiz Session
     * Successful Response
     */
    200: [
        QuizSessionPublic,
        QuizzesPublic
    ];
};

export type PostApiV1CoursesByCourseIdQuizStartResponse = PostApiV1CoursesByCourseIdQuizStartResponses[keyof PostApiV1CoursesByCourseIdQuizStartResponses];

export type GetApiV1CoursesByCourseIdStatsData = {
    body?: never;
    path: {
        /**
         * Course Id
         */
        course_id: string;
    };
    query?: never;
    url: '/api/v1/courses/{course_id}/stats';
};

export type GetApiV1CoursesByCourseIdStatsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetApiV1CoursesByCourseIdStatsError = GetApiV1CoursesByCourseIdStatsErrors[keyof GetApiV1CoursesByCourseIdStatsErrors];

export type GetApiV1CoursesByCourseIdStatsResponses = {
    /**
     * Successful Response
     */
    200: QuizStats;
};

export type GetApiV1CoursesByCourseIdStatsResponse = GetApiV1CoursesByCourseIdStatsResponses[keyof GetApiV1CoursesByCourseIdStatsResponses];

export type GetApiV1CoursesByIdFlashcardsData = {
    body?: never;
    path: {
        /**
         * Id
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/courses/{id}/flashcards';
};

export type GetApiV1CoursesByIdFlashcardsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetApiV1CoursesByIdFlashcardsError = GetApiV1CoursesByIdFlashcardsErrors[keyof GetApiV1CoursesByIdFlashcardsErrors];

export type GetApiV1CoursesByIdFlashcardsResponses = {
    /**
     * Response Courses-Generate Flashcards By Course Id
     * Successful Response
     */
    200: Array<QaItem>;
};

export type GetApiV1CoursesByIdFlashcardsResponse = GetApiV1CoursesByIdFlashcardsResponses[keyof GetApiV1CoursesByIdFlashcardsResponses];

export type PostApiV1ChatByCourseIdStreamData = {
    body: ChatMessage;
    path: {
        /**
         * Course Id
         */
        course_id: string;
    };
    query?: never;
    url: '/api/v1/chat/{course_id}/stream';
};

export type PostApiV1ChatByCourseIdStreamErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Course not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostApiV1ChatByCourseIdStreamError = PostApiV1ChatByCourseIdStreamErrors[keyof PostApiV1ChatByCourseIdStreamErrors];

export type PostApiV1ChatByCourseIdStreamResponses = {
    /**
     * Successful streaming response
     */
    200: unknown;
};

export type GetApiV1ChatByCourseIdHistoryData = {
    body?: never;
    path: {
        /**
         * Course Id
         */
        course_id: string;
    };
    query?: {
        /**
         * Limit
         */
        limit?: number;
    };
    url: '/api/v1/chat/{course_id}/history';
};

export type GetApiV1ChatByCourseIdHistoryErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Course not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetApiV1ChatByCourseIdHistoryError = GetApiV1ChatByCourseIdHistoryErrors[keyof GetApiV1ChatByCourseIdHistoryErrors];

export type GetApiV1ChatByCourseIdHistoryResponses = {
    /**
     * Response 200 Chat-Get Chat History
     * List of chat messages
     */
    200: Array<ChatPublic>;
};

export type GetApiV1ChatByCourseIdHistoryResponse = GetApiV1ChatByCourseIdHistoryResponses[keyof GetApiV1ChatByCourseIdHistoryResponses];

export type PostApiV1DocumentsProcessData = {
    body: BodyDocumentsProcessMultipleDocuments;
    path?: never;
    query?: never;
    url: '/api/v1/documents/process';
};

export type PostApiV1DocumentsProcessErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostApiV1DocumentsProcessError = PostApiV1DocumentsProcessErrors[keyof PostApiV1DocumentsProcessErrors];

export type PostApiV1DocumentsProcessResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type DeleteApiV1DocumentsByIdData = {
    body?: never;
    path: {
        /**
         * Id
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/documents/{id}';
};

export type DeleteApiV1DocumentsByIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteApiV1DocumentsByIdError = DeleteApiV1DocumentsByIdErrors[keyof DeleteApiV1DocumentsByIdErrors];

export type DeleteApiV1DocumentsByIdResponses = {
    /**
     * Response Documents-Delete Document
     * Successful Response
     */
    200: unknown;
};

export type GetApiV1DocumentsByIdData = {
    body?: never;
    path: {
        /**
         * Id
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/documents/{id}';
};

export type GetApiV1DocumentsByIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetApiV1DocumentsByIdError = GetApiV1DocumentsByIdErrors[keyof GetApiV1DocumentsByIdErrors];

export type GetApiV1DocumentsByIdResponses = {
    /**
     * Successful Response
     */
    200: Document;
};

export type GetApiV1DocumentsByIdResponse = GetApiV1DocumentsByIdResponses[keyof GetApiV1DocumentsByIdResponses];

export type GetApiV1QuizSessionsByIdData = {
    body?: never;
    path: {
        /**
         * Id
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/quiz-sessions/{id}';
};

export type GetApiV1QuizSessionsByIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetApiV1QuizSessionsByIdError = GetApiV1QuizSessionsByIdErrors[keyof GetApiV1QuizSessionsByIdErrors];

export type GetApiV1QuizSessionsByIdResponses = {
    /**
     * Successful Response
     */
    200: QuizSessionPublicWithResults;
};

export type GetApiV1QuizSessionsByIdResponse = GetApiV1QuizSessionsByIdResponses[keyof GetApiV1QuizSessionsByIdResponses];

export type PostApiV1QuizSessionsByIdScoreData = {
    body: QuizSubmissionBatch;
    path?: never;
    query: {
        /**
         * Session Id
         */
        session_id: string;
    };
    url: '/api/v1/quiz-sessions/{id}/score';
};

export type PostApiV1QuizSessionsByIdScoreErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostApiV1QuizSessionsByIdScoreError = PostApiV1QuizSessionsByIdScoreErrors[keyof PostApiV1QuizSessionsByIdScoreErrors];

export type PostApiV1QuizSessionsByIdScoreResponses = {
    /**
     * Successful Response
     */
    200: QuizScoreSummary;
};

export type PostApiV1QuizSessionsByIdScoreResponse = PostApiV1QuizSessionsByIdScoreResponses[keyof PostApiV1QuizSessionsByIdScoreResponses];

export type PostApiV1PrivateUsersData = {
    body: PrivateUserCreate;
    path?: never;
    query?: never;
    url: '/api/v1/private/users/';
};

export type PostApiV1PrivateUsersErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostApiV1PrivateUsersError = PostApiV1PrivateUsersErrors[keyof PostApiV1PrivateUsersErrors];

export type PostApiV1PrivateUsersResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type PostApiV1PrivateUsersResponse = PostApiV1PrivateUsersResponses[keyof PostApiV1PrivateUsersResponses];
