// This file is auto-generated by @hey-api/openapi-ts

import { type Client, formDataBodySerializer, type Options as Options2, type TDataShape, urlSearchParamsBodySerializer } from './client';
import { client } from './client.gen';
import type { DeleteApiV1CoursesByIdData, DeleteApiV1CoursesByIdErrors, DeleteApiV1CoursesByIdResponses, DeleteApiV1DocumentsByIdData, DeleteApiV1DocumentsByIdErrors, DeleteApiV1DocumentsByIdResponses, DeleteApiV1ItemsByIdData, DeleteApiV1ItemsByIdErrors, DeleteApiV1ItemsByIdResponses, DeleteApiV1UsersByUserIdData, DeleteApiV1UsersByUserIdErrors, DeleteApiV1UsersByUserIdResponses, DeleteApiV1UsersMeData, DeleteApiV1UsersMeResponses, GetApiV1ChatByCourseIdHistoryData, GetApiV1ChatByCourseIdHistoryErrors, GetApiV1ChatByCourseIdHistoryResponses, GetApiV1CoursesByCourseIdStatsData, GetApiV1CoursesByCourseIdStatsErrors, GetApiV1CoursesByCourseIdStatsResponses, GetApiV1CoursesByIdAttemptsData, GetApiV1CoursesByIdAttemptsErrors, GetApiV1CoursesByIdAttemptsResponses, GetApiV1CoursesByIdData, GetApiV1CoursesByIdDocumentsData, GetApiV1CoursesByIdDocumentsErrors, GetApiV1CoursesByIdDocumentsResponses, GetApiV1CoursesByIdErrors, GetApiV1CoursesByIdFlashcardsData, GetApiV1CoursesByIdFlashcardsErrors, GetApiV1CoursesByIdFlashcardsResponses, GetApiV1CoursesByIdQuizzesData, GetApiV1CoursesByIdQuizzesErrors, GetApiV1CoursesByIdQuizzesResponses, GetApiV1CoursesByIdResponses, GetApiV1CoursesData, GetApiV1CoursesErrors, GetApiV1CoursesResponses, GetApiV1DocumentsByIdData, GetApiV1DocumentsByIdErrors, GetApiV1DocumentsByIdResponses, GetApiV1ItemsByIdData, GetApiV1ItemsByIdErrors, GetApiV1ItemsByIdResponses, GetApiV1ItemsData, GetApiV1ItemsErrors, GetApiV1ItemsResponses, GetApiV1QuizSessionsByIdData, GetApiV1QuizSessionsByIdErrors, GetApiV1QuizSessionsByIdResponses, GetApiV1UsersByUserIdData, GetApiV1UsersByUserIdErrors, GetApiV1UsersByUserIdResponses, GetApiV1UsersData, GetApiV1UsersErrors, GetApiV1UsersMeData, GetApiV1UsersMeResponses, GetApiV1UsersResponses, GetApiV1UtilsHealthCheckData, GetApiV1UtilsHealthCheckResponses, PatchApiV1UsersByUserIdData, PatchApiV1UsersByUserIdErrors, PatchApiV1UsersByUserIdResponses, PatchApiV1UsersMeData, PatchApiV1UsersMeErrors, PatchApiV1UsersMePasswordData, PatchApiV1UsersMePasswordErrors, PatchApiV1UsersMePasswordResponses, PatchApiV1UsersMeResponses, PostApiV1ChatByCourseIdStreamData, PostApiV1ChatByCourseIdStreamErrors, PostApiV1ChatByCourseIdStreamResponses, PostApiV1CoursesByCourseIdQuizStartData, PostApiV1CoursesByCourseIdQuizStartErrors, PostApiV1CoursesByCourseIdQuizStartResponses, PostApiV1CoursesData, PostApiV1CoursesErrors, PostApiV1CoursesResponses, PostApiV1DocumentsProcessData, PostApiV1DocumentsProcessErrors, PostApiV1DocumentsProcessResponses, PostApiV1ItemsData, PostApiV1ItemsErrors, PostApiV1ItemsResponses, PostApiV1LoginAccessTokenData, PostApiV1LoginAccessTokenErrors, PostApiV1LoginAccessTokenResponses, PostApiV1LoginTestTokenData, PostApiV1LoginTestTokenResponses, PostApiV1PasswordRecoveryByEmailData, PostApiV1PasswordRecoveryByEmailErrors, PostApiV1PasswordRecoveryByEmailResponses, PostApiV1PasswordRecoveryHtmlContentByEmailData, PostApiV1PasswordRecoveryHtmlContentByEmailErrors, PostApiV1PasswordRecoveryHtmlContentByEmailResponses, PostApiV1PrivateUsersData, PostApiV1PrivateUsersErrors, PostApiV1PrivateUsersResponses, PostApiV1QuizSessionsByIdScoreData, PostApiV1QuizSessionsByIdScoreErrors, PostApiV1QuizSessionsByIdScoreResponses, PostApiV1ResetPasswordData, PostApiV1ResetPasswordErrors, PostApiV1ResetPasswordResponses, PostApiV1UsersData, PostApiV1UsersErrors, PostApiV1UsersResponses, PostApiV1UsersSignupData, PostApiV1UsersSignupErrors, PostApiV1UsersSignupResponses, PostApiV1UtilsTestEmailData, PostApiV1UtilsTestEmailErrors, PostApiV1UtilsTestEmailResponses, PutApiV1CoursesByIdData, PutApiV1CoursesByIdErrors, PutApiV1CoursesByIdResponses, PutApiV1ItemsByIdData, PutApiV1ItemsByIdErrors, PutApiV1ItemsByIdResponses } from './types.gen';
import { zDeleteApiV1CoursesByIdData, zDeleteApiV1CoursesByIdResponse, zDeleteApiV1DocumentsByIdData, zDeleteApiV1ItemsByIdData, zDeleteApiV1ItemsByIdResponse, zDeleteApiV1UsersByUserIdData, zDeleteApiV1UsersByUserIdResponse, zDeleteApiV1UsersMeData, zDeleteApiV1UsersMeResponse, zGetApiV1ChatByCourseIdHistoryData, zGetApiV1ChatByCourseIdHistoryResponse, zGetApiV1CoursesByCourseIdStatsData, zGetApiV1CoursesByCourseIdStatsResponse, zGetApiV1CoursesByIdAttemptsData, zGetApiV1CoursesByIdAttemptsResponse, zGetApiV1CoursesByIdData, zGetApiV1CoursesByIdDocumentsData, zGetApiV1CoursesByIdDocumentsResponse, zGetApiV1CoursesByIdFlashcardsData, zGetApiV1CoursesByIdFlashcardsResponse, zGetApiV1CoursesByIdQuizzesData, zGetApiV1CoursesByIdQuizzesResponse, zGetApiV1CoursesByIdResponse, zGetApiV1CoursesData, zGetApiV1CoursesResponse, zGetApiV1DocumentsByIdData, zGetApiV1DocumentsByIdResponse, zGetApiV1ItemsByIdData, zGetApiV1ItemsByIdResponse, zGetApiV1ItemsData, zGetApiV1ItemsResponse, zGetApiV1QuizSessionsByIdData, zGetApiV1QuizSessionsByIdResponse, zGetApiV1UsersByUserIdData, zGetApiV1UsersByUserIdResponse, zGetApiV1UsersData, zGetApiV1UsersMeData, zGetApiV1UsersMeResponse, zGetApiV1UsersResponse, zGetApiV1UtilsHealthCheckData, zGetApiV1UtilsHealthCheckResponse, zPatchApiV1UsersByUserIdData, zPatchApiV1UsersByUserIdResponse, zPatchApiV1UsersMeData, zPatchApiV1UsersMePasswordData, zPatchApiV1UsersMePasswordResponse, zPatchApiV1UsersMeResponse, zPostApiV1ChatByCourseIdStreamData, zPostApiV1CoursesByCourseIdQuizStartData, zPostApiV1CoursesByCourseIdQuizStartResponse, zPostApiV1CoursesData, zPostApiV1CoursesResponse, zPostApiV1DocumentsProcessData, zPostApiV1ItemsData, zPostApiV1ItemsResponse, zPostApiV1LoginAccessTokenData, zPostApiV1LoginAccessTokenResponse, zPostApiV1LoginTestTokenData, zPostApiV1LoginTestTokenResponse, zPostApiV1PasswordRecoveryByEmailData, zPostApiV1PasswordRecoveryByEmailResponse, zPostApiV1PasswordRecoveryHtmlContentByEmailData, zPostApiV1PasswordRecoveryHtmlContentByEmailResponse, zPostApiV1PrivateUsersData, zPostApiV1PrivateUsersResponse, zPostApiV1QuizSessionsByIdScoreData, zPostApiV1QuizSessionsByIdScoreResponse, zPostApiV1ResetPasswordData, zPostApiV1ResetPasswordResponse, zPostApiV1UsersData, zPostApiV1UsersResponse, zPostApiV1UsersSignupData, zPostApiV1UsersSignupResponse, zPostApiV1UtilsTestEmailData, zPostApiV1UtilsTestEmailResponse, zPutApiV1CoursesByIdData, zPutApiV1CoursesByIdResponse, zPutApiV1ItemsByIdData, zPutApiV1ItemsByIdResponse } from './zod.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class LoginService {
    /**
     * Login Access Token
     * OAuth2 compatible token login, get an access token for future requests
     */
    public static postApiV1LoginAccessToken<ThrowOnError extends boolean = true>(options: Options<PostApiV1LoginAccessTokenData, ThrowOnError>) {
        return (options.client ?? client).post<PostApiV1LoginAccessTokenResponses, PostApiV1LoginAccessTokenErrors, ThrowOnError>({
            ...urlSearchParamsBodySerializer,
            requestValidator: async (data) => {
                return await zPostApiV1LoginAccessTokenData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zPostApiV1LoginAccessTokenResponse.parseAsync(data);
            },
            url: '/api/v1/login/access-token',
            ...options,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                ...options.headers
            }
        });
    }

    /**
     * Test Token
     * Test access token
     */
    public static postApiV1LoginTestToken<ThrowOnError extends boolean = true>(options?: Options<PostApiV1LoginTestTokenData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiV1LoginTestTokenResponses, unknown, ThrowOnError>({
            requestValidator: async (data) => {
                return await zPostApiV1LoginTestTokenData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zPostApiV1LoginTestTokenResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/login/test-token',
            ...options
        });
    }

    /**
     * Recover Password
     * Password Recovery
     */
    public static postApiV1PasswordRecoveryByEmail<ThrowOnError extends boolean = true>(options: Options<PostApiV1PasswordRecoveryByEmailData, ThrowOnError>) {
        return (options.client ?? client).post<PostApiV1PasswordRecoveryByEmailResponses, PostApiV1PasswordRecoveryByEmailErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zPostApiV1PasswordRecoveryByEmailData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zPostApiV1PasswordRecoveryByEmailResponse.parseAsync(data);
            },
            url: '/api/v1/password-recovery/{email}',
            ...options
        });
    }

    /**
     * Reset Password
     * Reset password
     */
    public static postApiV1ResetPassword<ThrowOnError extends boolean = true>(options: Options<PostApiV1ResetPasswordData, ThrowOnError>) {
        return (options.client ?? client).post<PostApiV1ResetPasswordResponses, PostApiV1ResetPasswordErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zPostApiV1ResetPasswordData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zPostApiV1ResetPasswordResponse.parseAsync(data);
            },
            url: '/api/v1/reset-password/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * Recover Password Html Content
     * HTML Content for Password Recovery
     */
    public static postApiV1PasswordRecoveryHtmlContentByEmail<ThrowOnError extends boolean = true>(options: Options<PostApiV1PasswordRecoveryHtmlContentByEmailData, ThrowOnError>) {
        return (options.client ?? client).post<PostApiV1PasswordRecoveryHtmlContentByEmailResponses, PostApiV1PasswordRecoveryHtmlContentByEmailErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zPostApiV1PasswordRecoveryHtmlContentByEmailData.parseAsync(data);
            },
            responseType: 'text',
            responseValidator: async (data) => {
                return await zPostApiV1PasswordRecoveryHtmlContentByEmailResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/password-recovery-html-content/{email}',
            ...options
        });
    }
}

export class UsersService {
    /**
     * Read Users
     * Retrieve users.
     */
    public static getApiV1Users<ThrowOnError extends boolean = true>(options?: Options<GetApiV1UsersData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiV1UsersResponses, GetApiV1UsersErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zGetApiV1UsersData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zGetApiV1UsersResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/',
            ...options
        });
    }

    /**
     * Create User
     * Create new user.
     */
    public static postApiV1Users<ThrowOnError extends boolean = true>(options: Options<PostApiV1UsersData, ThrowOnError>) {
        return (options.client ?? client).post<PostApiV1UsersResponses, PostApiV1UsersErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zPostApiV1UsersData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zPostApiV1UsersResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * Delete User Me
     * Delete own user.
     */
    public static deleteApiV1UsersMe<ThrowOnError extends boolean = true>(options?: Options<DeleteApiV1UsersMeData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteApiV1UsersMeResponses, unknown, ThrowOnError>({
            requestValidator: async (data) => {
                return await zDeleteApiV1UsersMeData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zDeleteApiV1UsersMeResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/me',
            ...options
        });
    }

    /**
     * Read User Me
     * Get current user.
     */
    public static getApiV1UsersMe<ThrowOnError extends boolean = true>(options?: Options<GetApiV1UsersMeData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiV1UsersMeResponses, unknown, ThrowOnError>({
            requestValidator: async (data) => {
                return await zGetApiV1UsersMeData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zGetApiV1UsersMeResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/me',
            ...options
        });
    }

    /**
     * Update User Me
     * Update own user.
     */
    public static patchApiV1UsersMe<ThrowOnError extends boolean = true>(options: Options<PatchApiV1UsersMeData, ThrowOnError>) {
        return (options.client ?? client).patch<PatchApiV1UsersMeResponses, PatchApiV1UsersMeErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zPatchApiV1UsersMeData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zPatchApiV1UsersMeResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/me',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * Update Password Me
     * Update own password.
     */
    public static patchApiV1UsersMePassword<ThrowOnError extends boolean = true>(options: Options<PatchApiV1UsersMePasswordData, ThrowOnError>) {
        return (options.client ?? client).patch<PatchApiV1UsersMePasswordResponses, PatchApiV1UsersMePasswordErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zPatchApiV1UsersMePasswordData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zPatchApiV1UsersMePasswordResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/me/password',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * Register User
     * Create new user without the need to be logged in.
     */
    public static postApiV1UsersSignup<ThrowOnError extends boolean = true>(options: Options<PostApiV1UsersSignupData, ThrowOnError>) {
        return (options.client ?? client).post<PostApiV1UsersSignupResponses, PostApiV1UsersSignupErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zPostApiV1UsersSignupData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zPostApiV1UsersSignupResponse.parseAsync(data);
            },
            url: '/api/v1/users/signup',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * Delete User
     * Delete a user.
     */
    public static deleteApiV1UsersByUserId<ThrowOnError extends boolean = true>(options: Options<DeleteApiV1UsersByUserIdData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteApiV1UsersByUserIdResponses, DeleteApiV1UsersByUserIdErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zDeleteApiV1UsersByUserIdData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zDeleteApiV1UsersByUserIdResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/{user_id}',
            ...options
        });
    }

    /**
     * Read User By Id
     * Get a specific user by id.
     */
    public static getApiV1UsersByUserId<ThrowOnError extends boolean = true>(options: Options<GetApiV1UsersByUserIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetApiV1UsersByUserIdResponses, GetApiV1UsersByUserIdErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zGetApiV1UsersByUserIdData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zGetApiV1UsersByUserIdResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/{user_id}',
            ...options
        });
    }

    /**
     * Update User
     * Update a user.
     */
    public static patchApiV1UsersByUserId<ThrowOnError extends boolean = true>(options: Options<PatchApiV1UsersByUserIdData, ThrowOnError>) {
        return (options.client ?? client).patch<PatchApiV1UsersByUserIdResponses, PatchApiV1UsersByUserIdErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zPatchApiV1UsersByUserIdData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zPatchApiV1UsersByUserIdResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/{user_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class UtilsService {
    /**
     * Test Email
     * Test emails.
     */
    public static postApiV1UtilsTestEmail<ThrowOnError extends boolean = true>(options: Options<PostApiV1UtilsTestEmailData, ThrowOnError>) {
        return (options.client ?? client).post<PostApiV1UtilsTestEmailResponses, PostApiV1UtilsTestEmailErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zPostApiV1UtilsTestEmailData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zPostApiV1UtilsTestEmailResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/utils/test-email/',
            ...options
        });
    }

    /**
     * Health Check
     */
    public static getApiV1UtilsHealthCheck<ThrowOnError extends boolean = true>(options?: Options<GetApiV1UtilsHealthCheckData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiV1UtilsHealthCheckResponses, unknown, ThrowOnError>({
            requestValidator: async (data) => {
                return await zGetApiV1UtilsHealthCheckData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zGetApiV1UtilsHealthCheckResponse.parseAsync(data);
            },
            url: '/api/v1/utils/health-check/',
            ...options
        });
    }
}

export class ItemsService {
    /**
     * Read Items
     * Retrieve items.
     */
    public static getApiV1Items<ThrowOnError extends boolean = true>(options?: Options<GetApiV1ItemsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiV1ItemsResponses, GetApiV1ItemsErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zGetApiV1ItemsData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zGetApiV1ItemsResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/items/',
            ...options
        });
    }

    /**
     * Create Item
     * Create new item.
     */
    public static postApiV1Items<ThrowOnError extends boolean = true>(options: Options<PostApiV1ItemsData, ThrowOnError>) {
        return (options.client ?? client).post<PostApiV1ItemsResponses, PostApiV1ItemsErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zPostApiV1ItemsData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zPostApiV1ItemsResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/items/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * Delete Item
     * Delete an item.
     */
    public static deleteApiV1ItemsById<ThrowOnError extends boolean = true>(options: Options<DeleteApiV1ItemsByIdData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteApiV1ItemsByIdResponses, DeleteApiV1ItemsByIdErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zDeleteApiV1ItemsByIdData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zDeleteApiV1ItemsByIdResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/items/{id}',
            ...options
        });
    }

    /**
     * Read Item
     * Get item by ID.
     */
    public static getApiV1ItemsById<ThrowOnError extends boolean = true>(options: Options<GetApiV1ItemsByIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetApiV1ItemsByIdResponses, GetApiV1ItemsByIdErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zGetApiV1ItemsByIdData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zGetApiV1ItemsByIdResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/items/{id}',
            ...options
        });
    }

    /**
     * Update Item
     * Update an item.
     */
    public static putApiV1ItemsById<ThrowOnError extends boolean = true>(options: Options<PutApiV1ItemsByIdData, ThrowOnError>) {
        return (options.client ?? client).put<PutApiV1ItemsByIdResponses, PutApiV1ItemsByIdErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zPutApiV1ItemsByIdData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zPutApiV1ItemsByIdResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/items/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class CoursesService {
    /**
     * Read Courses
     * Retrieve courses with pagination and user-based security filtering.
     */
    public static getApiV1Courses<ThrowOnError extends boolean = true>(options?: Options<GetApiV1CoursesData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiV1CoursesResponses, GetApiV1CoursesErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zGetApiV1CoursesData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zGetApiV1CoursesResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/courses/',
            ...options
        });
    }

    /**
     * Create Course
     * Create new course.
     */
    public static postApiV1Courses<ThrowOnError extends boolean = true>(options: Options<PostApiV1CoursesData, ThrowOnError>) {
        return (options.client ?? client).post<PostApiV1CoursesResponses, PostApiV1CoursesErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zPostApiV1CoursesData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zPostApiV1CoursesResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/courses/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * Delete Course
     * Delete an course.
     */
    public static deleteApiV1CoursesById<ThrowOnError extends boolean = true>(options: Options<DeleteApiV1CoursesByIdData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteApiV1CoursesByIdResponses, DeleteApiV1CoursesByIdErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zDeleteApiV1CoursesByIdData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zDeleteApiV1CoursesByIdResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/courses/{id}',
            ...options
        });
    }

    /**
     * Read Course
     * Get course by ID, including its documents.
     */
    public static getApiV1CoursesById<ThrowOnError extends boolean = true>(options: Options<GetApiV1CoursesByIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetApiV1CoursesByIdResponses, GetApiV1CoursesByIdErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zGetApiV1CoursesByIdData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zGetApiV1CoursesByIdResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/courses/{id}',
            ...options
        });
    }

    /**
     * Update Course
     * Update an course.
     */
    public static putApiV1CoursesById<ThrowOnError extends boolean = true>(options: Options<PutApiV1CoursesByIdData, ThrowOnError>) {
        return (options.client ?? client).put<PutApiV1CoursesByIdResponses, PutApiV1CoursesByIdErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zPutApiV1CoursesByIdData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zPutApiV1CoursesByIdResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/courses/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * List Documents
     * List documents for a specific course.
     */
    public static getApiV1CoursesByIdDocuments<ThrowOnError extends boolean = true>(options: Options<GetApiV1CoursesByIdDocumentsData, ThrowOnError>) {
        return (options.client ?? client).get<GetApiV1CoursesByIdDocumentsResponses, GetApiV1CoursesByIdDocumentsErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zGetApiV1CoursesByIdDocumentsData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zGetApiV1CoursesByIdDocumentsResponse.parseAsync(data);
            },
            url: '/api/v1/courses/{id}/documents',
            ...options
        });
    }

    /**
     * List Quizzes
     * Fetches the first 10 Quiz objects related to a specific course,
     * ensuring the course is owned by the current user.
     */
    public static getApiV1CoursesByIdQuizzes<ThrowOnError extends boolean = true>(options: Options<GetApiV1CoursesByIdQuizzesData, ThrowOnError>) {
        return (options.client ?? client).get<GetApiV1CoursesByIdQuizzesResponses, GetApiV1CoursesByIdQuizzesErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zGetApiV1CoursesByIdQuizzesData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zGetApiV1CoursesByIdQuizzesResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/courses/{id}/quizzes',
            ...options
        });
    }

    /**
     * Get Attempts Sessions
     * Fetch all incomplete quiz sessions for a given course and user.
     */
    public static getApiV1CoursesByIdAttempts<ThrowOnError extends boolean = true>(options: Options<GetApiV1CoursesByIdAttemptsData, ThrowOnError>) {
        return (options.client ?? client).get<GetApiV1CoursesByIdAttemptsResponses, GetApiV1CoursesByIdAttemptsErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zGetApiV1CoursesByIdAttemptsData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zGetApiV1CoursesByIdAttemptsResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/courses/{id}/attempts',
            ...options
        });
    }

    /**
     * Start New Quiz Session
     * Creates a new, immutable QuizSession, selects the initial set of questions,
     * and returns the session details and the first batch of questions.
     */
    public static postApiV1CoursesByCourseIdQuizStart<ThrowOnError extends boolean = true>(options: Options<PostApiV1CoursesByCourseIdQuizStartData, ThrowOnError>) {
        return (options.client ?? client).post<PostApiV1CoursesByCourseIdQuizStartResponses, PostApiV1CoursesByCourseIdQuizStartErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zPostApiV1CoursesByCourseIdQuizStartData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zPostApiV1CoursesByCourseIdQuizStartResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/courses/{course_id}/quiz/start',
            ...options
        });
    }

    /**
     * Get Quiz Stats
     * Fetches course statistics: overall average, total attempts, and the full
     * details of the single best-scoring quiz session.
     */
    public static getApiV1CoursesByCourseIdStats<ThrowOnError extends boolean = true>(options: Options<GetApiV1CoursesByCourseIdStatsData, ThrowOnError>) {
        return (options.client ?? client).get<GetApiV1CoursesByCourseIdStatsResponses, GetApiV1CoursesByCourseIdStatsErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zGetApiV1CoursesByCourseIdStatsData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zGetApiV1CoursesByCourseIdStatsResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/courses/{course_id}/stats',
            ...options
        });
    }

    /**
     * Generate Flashcards By Course Id
     * Generate flashcards for a specific course by retrieving relevant chunks and
     * using an LLM to structure the content into Q&A items.
     */
    public static getApiV1CoursesByIdFlashcards<ThrowOnError extends boolean = true>(options: Options<GetApiV1CoursesByIdFlashcardsData, ThrowOnError>) {
        return (options.client ?? client).get<GetApiV1CoursesByIdFlashcardsResponses, GetApiV1CoursesByIdFlashcardsErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zGetApiV1CoursesByIdFlashcardsData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zGetApiV1CoursesByIdFlashcardsResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/courses/{id}/flashcards',
            ...options
        });
    }
}

export class ChatService {
    /**
     * Stream chat responses
     * Stream AI-generated responses based on course materials
     */
    public static postApiV1ChatByCourseIdStream<ThrowOnError extends boolean = true>(options: Options<PostApiV1ChatByCourseIdStreamData, ThrowOnError>) {
        return (options.client ?? client).post<PostApiV1ChatByCourseIdStreamResponses, PostApiV1ChatByCourseIdStreamErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zPostApiV1ChatByCourseIdStreamData.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/chat/{course_id}/stream',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * Get chat history
     * Retrieve chat history for a course
     */
    public static getApiV1ChatByCourseIdHistory<ThrowOnError extends boolean = true>(options: Options<GetApiV1ChatByCourseIdHistoryData, ThrowOnError>) {
        return (options.client ?? client).get<GetApiV1ChatByCourseIdHistoryResponses, GetApiV1ChatByCourseIdHistoryErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zGetApiV1ChatByCourseIdHistoryData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zGetApiV1ChatByCourseIdHistoryResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/chat/{course_id}/history',
            ...options
        });
    }
}

export class DocumentsService {
    /**
     * Process Multiple Documents
     * Accept multiple PDF uploads, save to temp files, and queue a background task for each.
     */
    public static postApiV1DocumentsProcess<ThrowOnError extends boolean = true>(options: Options<PostApiV1DocumentsProcessData, ThrowOnError>) {
        return (options.client ?? client).post<PostApiV1DocumentsProcessResponses, PostApiV1DocumentsProcessErrors, ThrowOnError>({
            ...formDataBodySerializer,
            requestValidator: async (data) => {
                return await zPostApiV1DocumentsProcessData.parseAsync(data);
            },
            responseType: 'json',
            url: '/api/v1/documents/process',
            ...options,
            headers: {
                'Content-Type': null,
                ...options.headers
            }
        });
    }

    /**
     * Delete Document
     * Delete a document by its ID, ensuring the user has permissions.
     */
    public static deleteApiV1DocumentsById<ThrowOnError extends boolean = true>(options: Options<DeleteApiV1DocumentsByIdData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteApiV1DocumentsByIdResponses, DeleteApiV1DocumentsByIdErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zDeleteApiV1DocumentsByIdData.parseAsync(data);
            },
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/documents/{id}',
            ...options
        });
    }

    /**
     * Read Document
     * Get a document by its ID, ensuring the user has permissions.
     */
    public static getApiV1DocumentsById<ThrowOnError extends boolean = true>(options: Options<GetApiV1DocumentsByIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetApiV1DocumentsByIdResponses, GetApiV1DocumentsByIdErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zGetApiV1DocumentsByIdData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zGetApiV1DocumentsByIdResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/documents/{id}',
            ...options
        });
    }
}

export class QuizSessionsService {
    /**
     * Get Quiz Session Optimized
     * Retrieves a QuizSession, eagerly loading attempts ONLY if completed,
     * or just the session and quizzes if in progress.
     */
    public static getApiV1QuizSessionsById<ThrowOnError extends boolean = true>(options: Options<GetApiV1QuizSessionsByIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetApiV1QuizSessionsByIdResponses, GetApiV1QuizSessionsByIdErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zGetApiV1QuizSessionsByIdData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zGetApiV1QuizSessionsByIdResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/quiz-sessions/{id}',
            ...options
        });
    }

    /**
     * Submit And Score Quiz Batch
     * API endpoint to receive a batch of user answers and score a specific
     * QuizSession identified by the session_id.
     */
    public static postApiV1QuizSessionsByIdScore<ThrowOnError extends boolean = true>(options: Options<PostApiV1QuizSessionsByIdScoreData, ThrowOnError>) {
        return (options.client ?? client).post<PostApiV1QuizSessionsByIdScoreResponses, PostApiV1QuizSessionsByIdScoreErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zPostApiV1QuizSessionsByIdScoreData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zPostApiV1QuizSessionsByIdScoreResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/quiz-sessions/{id}/score',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class PrivateService {
    /**
     * Create User
     * Create a new user.
     */
    public static postApiV1PrivateUsers<ThrowOnError extends boolean = true>(options: Options<PostApiV1PrivateUsersData, ThrowOnError>) {
        return (options.client ?? client).post<PostApiV1PrivateUsersResponses, PostApiV1PrivateUsersErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zPostApiV1PrivateUsersData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zPostApiV1PrivateUsersResponse.parseAsync(data);
            },
            url: '/api/v1/private/users/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}
